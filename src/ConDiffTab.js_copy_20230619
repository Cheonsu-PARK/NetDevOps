import React, { Component } from 'react';
import { Placeholder } from 'react-bootstrap';
import { styled } from '@mui/material/styles';
import 'bootstrap/dist/css/bootstrap.min.css';
import Typography from '@mui/material/Typography';
import Box from '@mui/material/Box';
import MUIButton from '@mui/material/Button';
import Modal from '@mui/material/Modal';
import Grid from '@mui/material/Grid';
import Paper from '@mui/material/Paper';
import ConfList from './ConfList';
import axios from 'axios';
import TextField from '@mui/material/TextField';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import Radio from '@mui/material/Radio';
import RadioGroup from '@mui/material/RadioGroup';
import FormControlLabel from '@mui/material/FormControlLabel';
import FormControl from '@mui/material/FormControl';
import FormLabel from '@mui/material/FormLabel';
import InputLabel from '@mui/material/InputLabel';
import MenuItem from '@mui/material/MenuItem';
import Select, { SelectChangeEvent } from '@mui/material/Select';
import Autocomplete from '@mui/material/Autocomplete';
import { DataGrid, GridToolbar, GridColDef} from '@mui/x-data-grid';

const Item = styled(Paper)(({ theme }) => ({
  backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',
  ...theme.typography.body2,
  padding: theme.spacing(1),
  textAlign: 'center',
  color: theme.palette.text.secondary,
}));

const modalStyle = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: 400,
  bgcolor: 'background.paper',
  border: '2px solid #000',
  boxShadow: 24,
  p: 4,
};

class ConDiffTab extends Component {
  constructor(props) {
    super(props);
    this.state = {
	  value: 0,
	  searchStdModalShow: false,
	  searchExgModalShow: false,
	  devSearchFilter: '',
      modalStdShow: false,
      modalExgShow: false,
      configCompared: null,
      configSearched:null,
	  adcbindSearched: [],
      configExg: null,
      hostnameExg: null,
      targetStd: '',
      targetExg: '',
      targetkeywordExg : '',
      enrolled: '',
	  vendorRadio : '',
	  vendorRadio_adc : null,
	  adcbindSearched : [],
	  selected_adc : null,
	  device_list_adc : null,

    }
  }

  a11yProps = (index) => {
    return {
      id: `tab-${index}`,
      'aria-controls': `tabpanel-${index}`,
    };
  }

  funcChange = (event, newValue) => {
    this.setState({ value: newValue });
  }

  modalStdShow = async() => {
    var self = this;
    await axios.post('http://10.162.0.197:5000/ConfList', {
          args : '',
    })
    .then(function(res){
	  console.log(res)
          self.setState({ configTarget : res.data.data.split(','), modalStdShow : true });
    });
  }

  modalStdClose = () => {
    this.setState({ modalStdShow : false});
  }

  modalExgShow = async() => {
    var self = this;
    await axios.post('http://10.162.0.197:5000/ConfList', {
          args : '',
    })
    .then(function(res){
          let confList = res.data.data.split(',');
          let refineList = [];
	  console.log(confList)
          for(let i = 0; i < confList.length; i++){
            if(self.state.targetStd[1] !== confList[i]){
              refineList[i] = confList[i];
            }
          }
          self.setState({ configExg : refineList, modalExgShow : true });
    });
  }

  prepareStdSearchModalPopup = async() => {
    this.setState({ searchStdModalShow : true })
  }

  prepareStdSearchModalClose = async() => {
    this.setState({ searchStdModalShow : false })
  }

  prepareExgSearchModalPopup = async() => {
    this.setState({ searchExgModalShow : true })
  }

  prepareExgSearchModalClose = async() => {
    this.setState({ searchExgModalShow : false })
  }

  prepareStdConfigDiff = async() => {
    var self = this;
    await axios.post('http://10.162.0.197:5000/ConfList', {
	  filter : this.state.devSearchFilter,
    })
    .then(function(res){
  	  self.setState({ configTarget : res.data.data.replace('\n', '').split(','), modalStdShow : true, searchStdModalShow : false });
    });
  }

  prepareExgConfigDiff = async() => {
    var self = this;
    await axios.post('http://10.162.0.197:5000/ConfList', {
	  filter : this.state.devSearchFilter,
    })
    .then(function(res){
  	  self.setState({ configExg : res.data.data.replace('\n', '').split(','), modalExgShow : true, searchExgModalShow : false });
    });
  }

  modalExgClose = () => {
    this.setState({ modalExgShow : false});
  }

  setTargetStd = (idx) => {
    this.setState({ targetStd : idx });
    this.modalStdClose();
  }

  setTargetExg = (idx) => {
    this.setState({ targetExg : idx });
  }

  setkeywordExg = (ev) => {
    this.setState({ targetkeywordExg : ev.target.value });
  }

  setvendorRadio = (ev) => {
	  this.setState({ vendorRadio : ev.target.value });
	  console.log(this.state.vendorRadio);
  }

  onDevSearchFilterFieldChanged = (ev) => {
    this.setState({ devSearchFilter : ev.target.value });
  }

  set_adcbindSearched = (ev) => {
    this.setstate({adcbindSearched : ev.target.value});
  }

  set_adc_vendor_radio = (ev) => {
    this.setState({ vendorRadio_adc : ev.target.value }, () => {
      console.log(this.state.vendorRadio_adc);
      this.config_search_ADC();
    })
  }

  set_selected_adc = (ev, value) => {
    this.setState({ selected_adc: value });
  }


  renderTableData_adc = () => {
    const valueArray = [];
    const dupcolumns = [];

    for (let vserver of Object.keys(this.state.adcbindSearched)) { // vserver name
      valueArray.push(this.state.adcbindSearched[vserver])
      for (let bkey of Object.keys(this.state.adcbindSearched[vserver])) { // bkey == binding information
        dupcolumns.push([bkey,{field: bkey, headerName: bkey, flex :1,
              renderCell: (params) => (
                <div>
                {Array.isArray(params.value)
                  ? params.value.map((output, index) => (
                      <React.Fragment key={index}>
                        <Typography>{output}</Typography>
                        {index !== params.value.length - 1}
                      </React.Fragment>
                    ))
                  : <Typography>{params.value}</Typography>
                }
              </div>
              )
              } ])

          }
         }

    console.log(valueArray);
    const columns = new Map(dupcolumns);
    const rescolumns = Array.from(columns.values());

     return(
      console.log(rescolumns),
      <div>
      <DataGrid rows={valueArray}
                columns={rescolumns}
                rowCount={500}
                slots={{ toolbar: GridToolbar }}
                getRowHeight={() => 'auto'}
                onColumnResized={this.adjustColumnWidths}
                >

      </DataGrid>
      </div>
     )
   }

  config_search_ADC = async() => {
    var self = this;
    console.log(this.state.vendorRadio_adc);
    if (self.state.vendorRadio_adc === 'A10'){
        await axios.post('http://10.162.0.197:5000/ConfList/bind/a10', {
                })
                .then(function(res){
                  self.setState({device_list_adc :res.data.data.split(',') });
                  console.log(self.state.device_list_adc);

          });
        }

    else if (self.state.vendorRadio_adc === 'CITRIX'){

        await axios.post('http://10.162.0.197:5000/ConfList/bind/citrix', {
                })
                .then(function(res){
                  self.setState({device_list_adc :res.data.data.split(',') });
                  console.log(self.state.device_list_adc);

          });

        }
    }

    generate_adc_table = async() => {
      var self = this;
      console.log(this.state.selected_adc);
      if (self.state.vendorRadio_adc === 'A10'){
      await  axios.post('http://10.162.0.197:5000/ConfSearch/bind/a10',{
        hostname : self.state.selected_adc,
      })
        .then (async function(res) {
        console.log(self.state.selected_adc);

        self.setState({adcbindSearched : JSON.parse(res.data.data)});
        })
  }
      else if (self.state.vendorRadio_adc === 'CITRIX'){
      await  axios.post('http://10.162.0.197:5000/ConfSearch/bind/citrix',{
        hostname : self.state.selected_adc,
    })
        .then (async function(res) {
        console.log(self.state.selected_adc);

        self.setState({adcbindSearched : JSON.parse(res.data.data)});
      })
  }
}

  configSearch = async() => {
    var self = this;
    await axios.post('http://10.162.0.197:5000/ConfList/Switch', {
          args : '',
    })
    .then(async function(res){
          let confList = res.data.data.split(',');
		  if (self.state.vendorRadio === 'All'){
              for (let i = 0; i < confList.length; i++){
                  await axios.post('http://10.162.0.197:5000/ConfSearch/All', {
                    keyword : self.state.targetkeywordExg,
                    hostname : confList[i],
                 })

                .then(function(res){
                    console.log(res)
                    if(self.state.configSearched == null){
                        self.setState({ configSearched : res.data.data });
                }   else {
                        self.setState({ configSearched : self.state.configSearched + '||' + res.data.data });
                }

            });
          }
		  }
      
		  else if (self.state.vendorRadio === 'Juniper'){
               for (let i = 0; i < confList.length; i++){
                   await axios.post('http://10.162.0.197:5000/ConfSearch/Juniper', {
                     keyword : self.state.targetkeywordExg,
                     hostname : confList[i],
                  })

                 .then(function(res){
                     console.log(res)
                     if(self.state.configSearched == null){
                         self.setState({ configSearched : res.data.data });
                 }   else {
                         self.setState({ configSearched : self.state.configSearched + '||' + res.data.data });
                 }

             });
           }
      }

		  else if (self.state.vendorRadio === 'Cisco'){
               for (let i = 0; i < confList.length; i++){
                   await axios.post('http://10.162.0.197:5000/ConfSearch/Cisco', {
                     keyword : self.state.targetkeywordExg,
                     hostname : confList[i],
                  })

                 .then(function(res){
                     console.log(res)
                     if(self.state.configSearched == null){
                         self.setState({ configSearched : res.data.data });
                 }   else {
                         self.setState({ configSearched : self.state.configSearched + '||' + res.data.data });
                 }

             });
           }
      }

	   });
}

  configCompare = async() => {
    var self = this;
    for(let i = 1; i < this.state.targetStd.length; i++){
      for(let j = 1; j < this.state.targetExg.length; j++){
        await axios.post('http://10.162.0.197:5000/ConfCompare', {
          target : self.state.targetStd[i],
          refer : self.state.targetExg[j],
          keyword : self.state.targetkeywordExg
        })
        .then(function(res){
          if(self.state.configCompared == null){
            self.setState({ configCompared : res.data.data });
          } else {
            self.setState({ configCompared : self.state.configCompared + '||' + res.data.data });
          }
          self.setState({ enrolled : res.data.data });
        });
      }
    }
  }

  configConfirm = async() => {
    var self = this;
    var confirmFilesArgs = '';
    for(let i = 1; i < this.state.targetStd.length; i++){
      confirmFilesArgs += this.state.targetStd[i] + ',';
    }
    await axios.post('http://10.162.0.197:5000/ConfConfirm', {
        args : confirmFilesArgs,
    })
    .then(function(res){
      self.setState({ enrolled : res.data.data });
    });
  }
    

  render() {
    return (
      <div>
	    <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs
            value={this.state.value}
            variant="fullWidth"
            onChange={this.funcChange}
            aria-label="basic tabs"
            textColor="secondary"
            indicatorColor="secondary"
            >
            <Tab label="Differ" {...this.a11yProps(0)} />
            <Tab label="Searcher" {...this.a11yProps(1)} />
			<Tab label="bindfinder" {...this.a11yProps(2)} />
          </Tabs>
        </Box>
        <TabPanel value={this.state.value} index={0}>
          <MUIButton variant="Target config" onClick={this.prepareStdSearchModalPopup}>Select a standard file</MUIButton>{' '}
          <br />
          <MUIButton variant="Experimental group config" onClick={this.prepareExgSearchModalPopup}>Select reference files</MUIButton>{' '}
	      <br /><br /><br />
	      <MUIButton variant="Experimental group config" onClick={this.configCompare}>Compare</MUIButton>{' '}
            <Placeholder xs={12} bg="warning" />
            <br /><br /><br /><br />
          <MUIButton variant="Config confirm" onClick={this.configConfirm}>Confirm</MUIButton>{' '}
        </TabPanel>
        <TabPanel value={this.state.value} index={1}>
		  Enter filter
		  <br /><br />
          <TextField id="outlined-basic" label="Search Keyword" variant="outlined" onChange={this.setkeywordExg} />

		  <br /><br />
		  <FormControl>
            <FormLabel id="vendor_sw">Vendor</FormLabel>
            <RadioGroup
			      row
            aria-labelledby="vendor_sw"
            name="radio-buttons-group"
            >
           <FormControlLabel value="All" index = {1} control={<Radio />} label="All" onChange={this.setvendorRadio}/>
           <FormControlLabel value="Juniper" index = {2} control={<Radio />} label="Juniper" onChange={this.setvendorRadio}/>
           <FormControlLabel value="Cisco" index={3} control={<Radio />} label="Cisco"  onChange={this.setvendorRadio} />
           </RadioGroup>

          <br /> <br />
          <div>{this.state.vendorRadio} </div>
          <br /> <br />
	      <MUIButton variant="Config finder" onClick={this.configSearch} >Config Finder</MUIButton>{' '}
          </FormControl>
          <br /><br />
          <Placeholder xs={12} bg="warning" />
          <br /><br /><br /><br />
          <div>
          {this.state.configCompared !== null ?
          this.state.configCompared.split('||').map((data, index1) => (
            <Box sx={{ width: '100%' }} key={index1}>
              <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>
                {data.split(',').map((chunk, index2) => (
                  <Grid item xs={6} key={index2}>
                    <Item>
                      {chunk.split('\n').map((item, index3) => (
                        <p align="left" key={index3}>
                          {item}
                        </p>
                      ))}
                    </Item>
                  </Grid>
                ))}
              </Grid>
            </Box>
          )) :  null}
          </div>
          <div>
            <TableContainer component={Paper}>
              <Table sx={{ minWidth: 650 }} size="small" aria-label="searched table">
                <TableHead>
                  <TableRow>
                    <TableCell> Index </TableCell>
                    <TableCell> Hostname </TableCell>
                    <TableCell align = "right"> Configuration </TableCell>
					<TableCell align = "right"> Vendor Flag </TableCell>
                  </TableRow>
                </TableHead>
                {this.state.configSearched !== null ?
                this.state.configSearched.split('||').map((data, index1) => (
                <TableBody>
                   <TableRow>
                     <TableCell component="th" scope="row">
                       {index1}
                     </TableCell>
                     <TableCell component="th" scope="row">
                       {data.split(',')[0]}
                     </TableCell>
                     <TableCell > {data.split(',')[1].split('\n').map((item,index2) =>
                       <div key={index2}>{item}</div>
                     )}
				     </TableCell>
				     <TableCell component="th" scope= "row">
                       <div> {data.split(',')[2]} </div>
                     </TableCell>
                   </TableRow>
                </TableBody>
                )): null}
              </Table>
            </TableContainer>
          </div>
        </TabPanel>
		<TabPanel value={this.state.value} index={2}>
		  <div>
	      <FormControl>
              <FormLabel id="vendor_adc">Vendor</FormLabel>
              <RadioGroup
                          row
                          aria-labelledby="vendor_adc"
						  name="radio-buttons-group">
				<FormControlLabel value="A10" index = {1} control={<Radio />} label="A10" onClick={this.set_adc_vendor_radio}/>
				<FormControlLabel value="CITRIX" index= {2} control={<Radio />} label="CITRIX"  onClick={this.set_adc_vendor_radio} />
		      </RadioGroup>
          </FormControl>
		  {this.state.vendorRadio_adc !== null ?
            <div>
              <div>
              <div>
                <Autocomplete disablePortal
                              id="disable-close-on-select"
                              options={this.state.device_list_adc}
                              value={this.state.selected_adc}
                              onChange={this.set_selected_adc}
                              sx={{ width: 500 }}
                              renderInput={(params) => <TextField {...params} label="Select ADC" />}
                 />
                {this.state.selected_adc !== null ?
               <div>
                {this.state.selected_adc !== '' ?
                   <MUIButton variant="BindFinder" onClick={this.generate_adc_table}>BindFinder</MUIButton>
               : null}
               </div>
               
               : null}
                </div>
                </div>
           </div>
          : null
          }
       </div>

       <TableContainer component={Paper}>
        <Table sx={{ minWidth: 650 }} size="small" aria-label="Binding Table">
           <div>{this.renderTableData_adc()}</div>
		 </Table>
		 </TableContainer>
		</TabPanel>
        <Modal
          open={this.state.searchStdModalShow}
          onClose={this.prepareStdSearchModalClose}
          aria-labelledby="modal-modal-title"
          aria-describedby="modal-modal-description"
        >
          <Box sx={modalStyle}>
            <Typography id="modal-modal-title" variant="h6" component="h2">
             CMS target list
            </Typography>
            <Typography id="modal-modal-description" sx={{ mt: 2 }}>
              Netbuilder, select configuration target.
            </Typography>
	    <br />
	    <br />
		<div>
  		  Search Device
	      &nbsp;&nbsp;
	      <TextField id="outlined-basic" label="Keyword" variant="outlined" onChange={this.onDevSearchFilterFieldChanged}/>
	      <br /><br />
	      If all device you wants, enter "all".
		  <br />
		  There 3,000 over backup configs are.
	    </div>
	      <br />
	      <br />
	      <MUIButton variant="Prepare confing diff" onClick={this.prepareStdConfigDiff}>Next</MUIButton>{' '}
            </Box>
        </Modal>
        <Modal
          open={this.state.searchExgModalShow}
          onClose={this.prepareExgSearchModalClose}
          aria-labelledby="modal-modal-title"
          aria-describedby="modal-modal-description"
        >
          <Box sx={modalStyle}>
            <Typography id="modal-modal-title" variant="h6" component="h2">
             CMS target list
            </Typography>
            <Typography id="modal-modal-description" sx={{ mt: 2 }}>
              Netbuilder, select configuration target.
            </Typography>
	    <br />
	    <br />
		<div>
  		  Search Device
	      &nbsp;&nbsp;
	      <TextField id="outlined-basic" label="Keyword" variant="outlined" onChange={this.onDevSearchFilterFieldChanged}/>
	      <br /><br />
	      If all device you wants, enter "all".
		  <br />
		  There 3,000 over backup configs are.
	    </div>
	      <br />
	      <br />
	      <MUIButton variant="Prepare confing diff" onClick={this.prepareExgConfigDiff}>Next</MUIButton>{' '}
            </Box>
        </Modal>

	    <Modal
          open={this.state.modalStdShow}
          onClose={this.modalStdClose}
          aria-labelledby="modal-title"
          aria-describedby="modal-description"
        >
          <Box sx={modalStyle}>
            <Typography id="modal-std-title" variant="h6" component="h2">
             CMS target list
            </Typography>
            <Typography id="modal-std-description" sx={{ mt: 2 }}>
              Netbuilder, select configuration target.
            </Typography>
            <br />
            <br />
            <ConfList list={this.state.configTarget} setTarget={this.setTargetStd} />
            <br />
            <br />
            <MUIButton variant="Static route confing apply" onClick={this.modalStdClose}>Select</MUIButton>{' '}
          </Box>
        </Modal>
        <Modal
          open={this.state.modalExgShow}
          onClose={this.modalExgClose}
          aria-labelledby="modal-title"
          aria-describedby="modal-description"
        >
          <Box sx={modalStyle}>
            <Typography id="modal-exg-title" variant="h6" component="h2">
             CMS target list
            </Typography>
            <Typography id="modal-std-description" sx={{ mt: 2 }}>
              Netbuilder, select configuration target.
            </Typography>
            <br />
            <br />
            <ConfList list={this.state.configExg} setTarget={this.setTargetExg} />
            <br />
            <br />
            <MUIButton variant="Static route confing apply" onClick={this.modalExgClose}>Select</MUIButton>{' '}
          </Box>
        </Modal>
      </div>
    );
  }
}


class TabPanel extends Component {
  render() {
    return (
      <Typography component="div" hidden={this.props.value !== this.props.index} >
        <Box p={3}>{this.props.children}</Box>
      </Typography>
    );
  }
}

export default ConDiffTab;
